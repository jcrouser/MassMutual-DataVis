facet_grid(cols = State, rows = region)
p5 <- ggplot(housing, aes(x = Date,
y = Home.Value))
p5 + geom_line(aes(color = State))
p5 <- p5 + geom_line() +
facet_grid(cols = State, rows = region)
p5 <- p5 + geom_line() +
facet_grid(cols = vars(State), rows = vars(region))
p5
p5 <- p5 + geom_line(aes(color = State)) +
facet_wrap(~region, ncol = 4)
p5
p5 <- p5 + geom_line(aes()) +
facet_wrap(~region, ncol = 4)
p5
p5 <- p5 + geom_line() +
facet_wrap(~region, ncol = 4)
p5
summary(housing)
housing %>% filter(is.na(region))
housing %>% filter(is.na(region)) %>% glimpse()
housing_byyear <- aggregate(cbind(Home.Value, Land.Value) ~ Date, data = housing, mean)
View(housing_byyear)
housing_byyear <- aggregate(cbind(Home.Value, Land.Value) ~ Date, data = housing, mean)
ggplot(housing_byyear,
aes(x=Date)) +
geom_line(aes(y = Home.Value), color="red") +
geom_line(aes(y = Land.Value), color="blue")
library(tidyr)
home_land_byyear <- gather(housing_byyear,
value = "value",
key = "type",
Home.Value, Land.Value)
View(home_land_byyear)
View(housing_byyear)
ggplot(home_land_byyear,
aes(x = Date,
y = value,
color = type)) +
geom_line()
View(housing_byyear)
View(home_land_byyear)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(data = diamonds,
aes(x = carat,
y = price)) +
geom_hex()
data()
glimpse(airquality)
glimpse(faithful)
?faithful
?sleep
?starwars
?msleep
library(ggplot2)
glimpse(msleep)
msleep %>%
ggplot(aes(x = order)) +
geom_boxplot()
msleep %>%
ggplot(aes(x = order, y = sleep_total)) +
geom_boxplot()
msleep %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot()
msleep %>%
drop_na() %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot()
msleep %>%
drop_na() %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot() +
geom_jitter()
msleep %>%
drop_na() %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_point()
msleep %>%
drop_na() %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter()
msleep %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter()
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter()
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(name)
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name))
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name, nudge_y = 0.5))
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name, nudge_y = 1))
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 1)
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.5)
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.1)
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.15)
msleep %>%
drop_na(vore) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.15) +
facet_wrap(~vore)
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) +
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.15) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) +
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.15) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) %>%
ggplot(aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_jitter() +
geom_text(aes(label=name), nudge_y = 0.15) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 1) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore"),
name = str_replace_all(name, " ", "\n")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.35,
size = 2) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore,"vore")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.35,
size = 2) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.35,
size = 2) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.35,
size = 1.5) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 1.5) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2) +
facet_wrap(~vore)
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_jitter() +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2)
?scale_color_discrete
install.packages("ggimage")
library(stringr) # for string manipulation
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = ""),
image = paste(vore, ".png", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_image(aes(image=image), size=.05) +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2) +
scale_color_discrete()
library(stringr) # for string manipulation
library(ggimage) # for custom icons
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = ""),
image = paste(vore, ".png", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_image(aes(image=image), size=.05) +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2) +
scale_color_discrete()
library(stringr) # for string manipulation
library(ggimage) # for custom icons
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = ""),
image = paste(vore, ".png", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_image(aes(image=image), size=.05) +
geom_text(aes(label=name),
nudge_y = 0.15,
size = 2) +
theme(legend.position = "none")
library(stringr) # for string manipulation
library(ggimage) # for custom icons
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = ""),
image = paste(vore, ".png", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_image(aes(image=image), size=.05) +
geom_text(aes(label=name),
nudge_y = 0.25,
size = 2) +
theme(legend.position = "none")
?msleep
library(stringr) # for string manipulation
library(ggimage) # for custom icons
msleep %>%
drop_na(vore) %>%
mutate(vore = paste(vore, "vore", sep = ""),
image = paste(vore, ".png", sep = "")) %>%
ggplot(aes(x = sleep_total,
y = sleep_rem,
color = vore)) +
geom_image(aes(image=image), size=.05) +
geom_text(aes(label=name),
nudge_y = 0.25,
size = 2)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2019/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
library(plotly)
txhousing
library(plotly)
summary(txhousing)
library(plotly)
txhousing
p <- ggplot(txhousing, aes(x = date, y = median)) +
geom_line(aes(group = city), alpha = 0.2)
p
p <- ggplot(txhousing, aes(x = date, y = median)) +
geom_line(aes(group = city), alpha = 0.2)
class(p)
ggplotly(p)
ggplotly(p, tooltip = "city")
library(dplyr)
tx <- group_by(txhousing, city)
# initiate a plotly object with date on x and median on y
p <- plot_ly(tx, x = ~date, y = ~median)
# plotly_data() returns data associated with a plotly object
plotly_data(p)
p
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
library(dplyr)
tx <- group_by(txhousing, city)
# initiate a plotly object with date on x and median on y
p <- plot_ly(txhousing, x = ~date, y = ~median)
# plotly_data() returns data associated with a plotly object
plotly_data(p)
p
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
library(dplyr)
tx <- group_by(txhousing, city)
# initiate a plotly object with date on x and median on y
p <- plot_ly(tx, x = ~date, y = ~median)
# plotly_data() returns data associated with a plotly object
plotly_data(p)
txhousing %>%
group_by(city) %>%
ggplot(aes(x = date, y = median)) +
geom_line(aes(group = city), alpha = 0.2)
p <- ggplot(txhousing, aes(x = date, y = median)) +
geom_line(aes(group = city), alpha = 0.2)
class(p)
p <- ggplot(txhousing, aes(x = date, y = median)) +
geom_line(alpha = 0.2)
class(p)
p <- ggplot(txhousing, aes(x = date, y = median)) +
geom_line(alpha = 0.2)
p
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
library(dplyr)
tx <- group_by(txhousing, city)
# initiate a plotly object with date on x and median on y
p <- plot_ly(tx, x = ~date, y = ~median)
# plotly_data() returns data associated with a plotly object
plotly_data(p)
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
add_lines(p, alpha = 0.2, name = "Texan Cities")
p <- txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "All TX Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
p
p <- txhousing %>%
group_by(city) %>%
plot_ly(x = date, y = median) %>%
add_lines(alpha = 0.2, name = "All TX Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
p
rangeslider(p)
p <- txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "All TX Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
p
rangeslider(p)
p2 <- ggplotly(ggplot(txhousing, aes(date, median)) + geom_bin2d())
p2
library(htmltools)
tagList(p, p2)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em;"),
tags$div(p2, style = "width: 45%; padding: 1em;")
)
knit_with_parameters('~/Google Drive/Synergistic Activities/MassMutual/2019/MassMutual-DataVis/lab-plotly.Rmd')
?tags$div
?tags
library(shiny)
fluidPage(
fluidRow(
column(6, p), column(6, p2)
)
)
?column
subplot(
p, p2,
shareY = TRUE
)
library(crosstalk)
shared_data <- txhousing %>%
filter(city %in% c("Houston", "Dallas", "Galveston")) %>%
SharedData$new(~year)
library(crosstalk)
shared_data <- txhousing %>%
filter(city %in% c("Houston", "Dallas", "Galveston")) %>%
SharedData$new(~year)
class(shared_data)
p <- ggplot(shared_data, aes(month, median)) +
geom_line(aes(group = year)) +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(color = "red")
View(shared_data)
shared_iris <- SharedData$new(iris)
p <- GGally::ggpairs(shared_iris, aes(color = Species), columns = 1:4)
highlight(ggplotly(p), on = "plotly_selected")
library(leaflet)
shared_quakes <- SharedData$new(quakes)
p <- plot_ly(shared_quakes, x = ~depth, y = ~mag) %>%
add_markers(alpha = 0.5) %>%
highlight("plotly_selected", dynamic = TRUE)
map <- leaflet(shared_quakes) %>%
addTiles() %>%
addCircles()
bscols(widths = c(6, 6), p, map)
library(leaflet)
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 6) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 10) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 14) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 16) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 19) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 18) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.518978, lat=42.381050, popup="DSDP!")
m
