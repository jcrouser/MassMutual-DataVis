x = rnorm(100)
y = 2 * x^2 + 4 + rnorm(100)
class_a = sample(100, 50)
y[class_a] = y[class_a] + 3
y[-class_a] = y[-class_a] - 3
# Plot using different colors
plot(x[class_a], y[class_a], pch="+", lwd=4, col="red", ylim=c(-4, 20), xlab="X", ylab="Y")
points(x[-class_a], y[-class_a], pch="o", lwd=4, col="blue")
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
class_a = sample(100, 50)
y[class_a] = y[class_a] + 3
y[-class_a] = y[-class_a] - 3
# Plot using different colors
plot(x[class_a], y[class_a], pch="+", lwd=4, col="red", ylim=c(-4, 20), xlab="X", ylab="Y")
points(x[-class_a], y[-class_a], pch="o", lwd=4, col="blue")
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
class_a <- df %>%
sample_frac(0.5) %>%
mutate(y = y + 3,
class = "A")
class_b <- df %>%
sample_frac(0.5) %>%
mutate(y = y - 3,
class = "B")
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
class_a <- df %>%
sample_frac(0.5) %>%
mutate(y = y + 3,
class = "A")
class_b <- df %>%
setdiff(class_a) %>%
mutate(y = y - 3,
class = "B")
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
class_a <- df %>%
sample_frac(0.5) %>%
mutate(y = y + 3)
class_b <- df %>%
setdiff(class_a) %>%
mutate(y = y - 3)
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x = rnorm(100),
y = 4 * x^2 + 3 + rnorm(100))
class_a <- df %>%
sample_frac(0.5) %>%
mutate(y = y + 3)
class_b <- df %>%
setdiff(class_a) %>%
mutate(y = y - 3)
library(dplyr)
set.seed(1)
df = data.frame(x = rnorm(100),
y = 4 * x^2 + 3 + rnorm(100))
class_a <- df %>%
sample_frac(0.5) %>%
mutate(y = y + 3)
class_b <- df %>%
setdiff(class_a) %>%
mutate(y = y - 3)
library(dplyr)
set.seed(1)
df = data.frame(x = rnorm(100),
y = 4 * x^2 + 3 + rnorm(100))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B")),
y = ifelse(class=="A", y+3, y-3))
?sample
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B")))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B"), replace=TRUE, size=nrows(df)))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B"), replace=TRUE))
?nrows
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B"), replace=TRUE, size = nrow(df)))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
df <- df %>%
mutate(class = sample(c("A", "B"), replace=TRUE, size = nrow(df)),
y = ifelse(class=="A", y+3, y-3))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = sample(c("A", "B"), size = nrow(df)),
y = ifelse(class=="A", y+3, y-3))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = sample(c("A", "B"), replace = TRUE, size = nrow(df)),
y = ifelse(class=="A", y+3, y-3))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = sample(c("A", "B"), replace = TRUE, size = nrow(df)),
y = ifelse(class=="A", y+3, y-3))
library(ggplot2)
ggplot(df) +
geom_point(aes(color = class))
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = sample(c("A", "B"), replace = TRUE, size = nrow(df)),
y = ifelse(class=="A", y+3, y-3))
library(ggplot2)
ggplot(df) +
geom_point(aes(x = x, y = y, color = class))
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
install.packages('e1071')
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
# Combin
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = sample(c(1, 2), replace = TRUE, size = nrow(df)),
y = ifelse(class==1, y+3, y-3))
# Look at classes to see separation
library(ggplot2)
ggplot(df) +
geom_point(aes(x = x, y = y, color = class))
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, data_train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear, data_train)
?plot
dev.off()
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear, data_train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear)
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
# Combin
df = data.frame(x,y)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = as.factor(sample(c(1, 2), replace = TRUE, size = nrow(df))),
y = ifelse(class==1, y+3, y-3))
# Look at classes to see separation
library(ggplot2)
ggplot(df) +
geom_point(aes(x = x, y = y, color = class))
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- plot.svm(svm_linear, train)
?plot
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- e1071::plot(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
p <- e1071::plot.svm(svm_linear, train)
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
# Combin
df = data.frame(y,x)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = as.factor(sample(c(1, 2), replace = TRUE, size = nrow(df))),
y = ifelse(class==1, y+3, y-3))
# Look at classes to see separation
library(ggplot2)
ggplot(df) +
geom_point(aes(x = x, y = y, color = class))
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
table(train, predict(svm_linear, train))
table(train$class, predict(svm_linear, train))
# Split into training and test
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
table(test$class, predict(svm_linear, test))
table(test$class, predict(svm_linear, test))
table(test$class, predict(svm_linear, test))
# Split into training and test
set.seed(1)
train <- df %>%
sample_frac(0.7)
test <- df %>%
setdiff(train)
# Fit svm with linear kernel
library(e1071)
svm_linear = svm(class~., data = train, kernel="linear", cost=10)
plot(svm_linear, train)
table(train$class, predict(svm_linear, train))
9/70
table(test$class, predict(svm_linear, test))
5/30
# Fit svm with polynomial kernel
svm_poly = svm(class~., data = train, kernel="polynomial", cost=10)
plot(svm_linear, train)
# Fit svm with polynomial kernel
svm_poly = svm(class~., data = train, kernel="polynomial", cost=10)
plot(svm_poly, train)
table(train$class, predict(svm_poly, train))
16/70
table(test$class, predict(svm_poly, test))
13/30
# Fit svm with radial kernel
svm_radial = svm(class~., data = train, kernel="radial", gamma=1, cost=10)
plot(svm_radial, train)
table(train$class, predict(svm_radial, train))
table(train$class, predict(svm_radial, train))
table(test$class, predict(svm_radial, test))
# Fit svm with polynomial kernel
svm_poly = svm(class~., data = train, kernel="polynomial", degree = 2, cost=10)
plot(svm_poly, train)
library(dplyr)
set.seed(1)
x = rnorm(100)
y = 4 * x^2 + 3 + rnorm(100)
# Combine into dataframe
df = data.frame(y,x)
# Randomly assign classes, then shift up/down by 3
df <- df %>%
mutate(class = as.factor(sample(c(1, 2), replace = TRUE, size = nrow(df))),
y = ifelse(class==1, y+3, y-3))
# Look at classes to see separation
library(ggplot2)
ggplot(df) +
geom_point(aes(x = x, y = y, color = class))
knitr::opts_chunk$set(echo = TRUE)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
warnings()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
