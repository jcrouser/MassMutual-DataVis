m
lightning <- storms %>%
filter(EVENT_TYPE=="Lightning")
m <- leaflet(data = lightning) %>%
addMarkers(~LONGITUDE, ~LATITUDE) %>%
addProviderTiles("Stamen.Toner")
lightning <- storms %>%
filter(EVENT_TYPE=="Lightning")
m <- leaflet(data = lightning) %>%
addMarkers(~LONGITUDE, ~LATITUDE) %>%
addProviderTiles("Stamen.Toner")
m
lightning_map <- storms %>%
filter(EVENT_TYPE=="Lightning") %>%
leaflet() %>%
addMarkers(~LONGITUDE, ~LATITUDE) %>%
addProviderTiles("Stamen.Toner") # We'll use black/white tiles for dramatic effect
lightning_map
mtw <- stormlocs %>%
filter(EVENT_TYPE=="Marine Thunderstorm Wind")
mtw <- storms %>%
filter(EVENT_TYPE=="Marine Thunderstorm Wind")
m <- leaflet(data=mtw) %>%
addProviderTiles("Stamen.Toner") %>%
addMarkers(~LONGITUDE, ~LATITUDE, popup=~EVENT_NARRATIVE)
m
library(rgdal)
# In the Console, I need to use a different path
states <- readOGR("cb_2015_us_state_500k", layer = "cb_2015_us_state_500k", verbose = FALSE)
install.packages("maptools")
library(maptools)
# In the Console, I need to use a different path
#states <- readOGR("cb_2015_us_state_500k", layer = "cb_2015_us_state_500k", verbose = FALSE)
library(maptools)
crswgs84=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# In the Console, I need to use a different path
#states <- readOGR("cb_2015_us_state_500k", layer = "cb_2015_us_state_500k", verbose = FALSE)
library(maptools)
crswgs84=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
states=readShapePoly("datasets/cb_2015_us_state_500k.shp",proj4string=crswgs84,verbose=TRUE)
library(maptools)
crswgs84=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
states=readShapePoly("datasets/cb_2015_us_state_500k/cb_2015_us_state_500k.shp",proj4string=crswgs84,verbose=TRUE)
# In the Console, I need to use a different path
#states <- readOGR("cb_2015_us_state_500k", layer = "cb_2015_us_state_500k", verbose = FALSE)
leaflet(data=states) %>%
addTiles() %>%
addPolygons(stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color =~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
m <- leaflet(data = tornados) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100,
popup = ~EVENT_NARRATIVE)
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado")
m <- leaflet(data = tornados) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100,
popup = ~EVENT_NARRATIVE)
tornados
tornados$DAMAGE_PROPERTY
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("k", "DAMAGE_PROPERTY", x, fixed = TRUE)))
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("k", "e3", DAMAGE_PROPERTY, fixed = TRUE)))
m <- leaflet(data = tornados) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100,
popup = ~EVENT_NARRATIVE)
m
tornados$DAMAGE_PROPERTY
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") #%>%
#mutate(DAMAGE_PROPERTY = as.numeric(sub("k", "e3", DAMAGE_PROPERTY, fixed = TRUE)))
tornados$DAMAGE_PROPERTY
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("K", "", DAMAGE_PROPERTY, fixed = TRUE)))
tornados$DAMAGE_PROPERTY
m <- leaflet(data = tornados) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100,
popup = ~EVENT_NARRATIVE)
m
m <- leaflet(data = tornados) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
m <- leaflet(data = tornados) %>%
ddProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
fill = "red",
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
color = "red",
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
color = "grey",
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("BlYl", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("BuOr", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("BuGn", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("Blues", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("BrBg", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color =~colorQuantile("BrBG", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
setView(-72.518978, 42.381050, zoom = 6) %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color = ~colorQuantile("BrBG", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
setView(-72.518978, 42.381050, zoom = 4) %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color = ~colorQuantile("BrBG", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
setView(-72.518978, 42.381050, zoom =3) %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color = ~colorQuantile("BrBG", states$AWATER)(AWATER)
)
states %>%
leaflet() %>%
setView(-95.976807, 40.829587, zoom =3) %>%
addProviderTiles("Stamen.Toner") %>%
addPolygons(stroke = FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color = ~colorQuantile("BrBG", states$AWATER)(AWATER)
)
tornadocount <- tornados %>%
group_by(STATE) %>%
summarize(n = n())
colors <- c("#edf8fb", "#b2e2e2", "#66c2a4", "#238b45")
tornadocount <- tornadocount %>%
mutate(color = cut(n, breaks = quantile(n)))
# Baaaaad factor practice. Do as I say, not as I do?!
levels(tornadocount$color) <- colors
states@data$NAME <- toupper(states@data$NAME)
states@data <- left_join(states@data, tornadocount, by=c("NAME"="STATE"))
leaflet(data = states) %>%
addTiles() %>%
addPolygons(stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~states@data$color.y)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
library(plotly)
plot_ly(z = ~volcano)
library(plotly)
head(volcano)
plot_ly(z = ~volcano)
library(plotly)
txhousing
p <- ggplot(txhousing, aes(date, median)) +
geom_line(aes(group = city), alpha = 0.2)
p
ggplotly(p, tooltip = "city")
ggplotly(p)
library(dplyr)
tx <- group_by(txhousing, city)
# initiate a plotly object with date on x and median on y
p <- plot_ly(tx, x = ~date, y = ~median)
# plotly_data() returns data associated with a plotly object
plotly_data(p)
p
# add a line highlighting houston
add_lines(
# plots one line per city since p knows city is a grouping variable
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none"),
name = "Houston", data = filter(txhousing, city == "Houston")
)
# add a line highlighting houston
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
# add a line highlighting houston
# add a line highlighting houston
add_lines(p, name = "Houston", data = filter(txhousing, city == "Houston"))
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
# add a line highlighting houston
add_lines(
# plots one line per city since p knows city is a grouping variable
add_lines(p, alpha = 0.2, name = "Texan Cities", hoverinfo = "none"),
name = "Houston", data = filter(txhousing, city == "Houston")
)
# add a line highlighting houston
add_lines(
# plot one line per city
# remember: this returns the modified plotly object, which then
#           becomes the 1st argument to the outer add_lines() call
add_lines(p, alpha = 0.2, name = "All TX Cities", hoverinfo = "none"),
name = "Houston", data = filter(txhousing, city == "Houston")
)
allCities <- txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
allCities %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "All TX Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
p <- txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "All TX Cities", hoverinfo = "none") %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
p
rangeslider(p)
ggplotly(ggplot(txhousing, aes(date, median)) + geom_bin2d())
p2 <- ggplotly(ggplot(txhousing, aes(date, median)) + geom_bin2d())
p2
library(htmltools)
tagList(p, p2)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 50%; padding: 1em; border: solid;"),
tags$div(p2, style = "width: 50%; padding: 1em; border: solid;")
)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em; border: solid;"),
tags$div(p2, style = "width: 45%; padding: 1em; border: solid;")
)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em; border: solid; float:left"),
tags$div(p2, style = "width: 45%; padding: 1em; border: solid;")
)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em; border: solid; float:left"),
tags$div(p2, style = "width: 45%; padding: 1em; border: solid; float:left")
)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em; border: solid;"),
tags$div(p2, style = "width: 45%; padding: 1em; border: solid;")
)
tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 45%; padding: 1em;"),
tags$div(p2, style = "width: 45%; padding: 1em;")
)
library(shiny)
fluidPage(
fluidRow(p),
fluidRow(
column(6, p), column(6, p)
)
)
library(shiny)
fluidPage(
fluidRow(
column(6, p), column(6, p2)
)
)
subplot(
p, p1,
nrows = 2, shareX = TRUE, shareY = TRUE,
titleY = FALSE, titleX = FALSE
)
subplot(
p, p1,
nrows = 2
)
subplot(
p, p2,
nrows = 2
)
subplot(
p, p2
)
subplot(
p, p2,
shareX = TRUE, shareY = TRUE
)
subplot(
p, p2,
shareY = TRUE,
titleY = FALSE,
titleX = FALSE
)
subplot(
p, p2, nrows = 1,
shareY = TRUE,
titleY = FALSE,
titleX = FALSE
)
subplot(
p, p2, nrows = 2,
shareY = TRUE,
titleY = FALSE,
titleX = FALSE
)
subplot(
p, p2, nrows = 2,
shareX = TRUE,
titleY = FALSE,
titleX = FALSE
)
library(crosstalk)
sd <- SharedData$new(txhousing, ~year)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
d <- SharedData$new(iris)
p <- GGally::ggpairs(d, aes(color = Species), columns = 1:4)
highlight(ggplotly(p), on = "plotly_selected")
# devtools::install_github("ropensci/plotly")
library(plotly)
library(crosstalk)
d <- SharedData$new(mtcars)
scatterplot <- plot_ly(d, x = ~mpg, y = ~disp) %>%
add_markers(color = I("black")) %>%
layout(dragmode = "select")
subplot(
plot_ly(d, y = ~disp, color = I("black")) %>%
add_boxplot(name = "overall"),
scatterplot, shareY = TRUE
) %>% layout(dragmode = "select")
View(tx)
View(tx)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
library(crosstalk)
sd <- txhouding %>%
filter(city %in% c("Houston", "Dallas", "Galveston")) %>%
SharedData$new(~year)
library(crosstalk)
sd <- txhousing %>%
filter(city %in% c("Houston", "Dallas", "Galveston")) %>%
SharedData$new(~year)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/MassMutual/2018/MassMutual-DataVis")
#render site.
rmarkdown::render_site()
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
library(crosstalk)
sd <- txhousing %>%
filter(city %in% c("Houston", "Dallas", "Galveston")) %>%
SharedData$new(~year)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
devtools::install_github('hadley/ggplot2')
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(defaultValues = 2015, color = "red")
